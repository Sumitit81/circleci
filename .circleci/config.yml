version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

base_image: &base_image
  hashicorp/terraform:0.12.31

working_directory: &working_directory
  ~/example

executors:
  sre_config: &sre_config
    docker:
      - image: *base_image
    resource_class: xlarge
    working_directory: *working_directory
    environment:
      BASH_ENV: /tmp/.bashrc
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  dev_config: &dev_config
    docker:
      - image: *base_image
    resource_class: xlarge
    working_directory: *working_directory
    environment:
      BASH_ENV: /tmp/.bashrc
      CMAKE_BUILD_PARALLEL_LEVEL: 2

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
    restore_cache:
      key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

commands: &set_terraform_environment
  aws-oidc-setup:
    description: set terraform environment
    parameters:
      profile-name:
        default: "terraform-dev-aws"
        description: Profile name for web identity role assumption
        type: string
      role-arn:
        description: |
           The Amazon Resource Name (ARN) of the role that the caller is assuming.
        type: string
        default: "arn:aws:iam::206576627575:role/circleci"
      role-session-name:
        default: ${CIRCLE_JOB}
        description: An identifier for the assumed role session
        type: string
      session-duration:
        default: "3600"
        description: The duration of the session in seconds
        type: string
    steps:
      - aws-cli/install
      - run:
          name: Get short-term credentials
          # command:
          # command: "PARAM_ROLE_SESSION_NAME=$(eval echo \"${PARAM_ROLE_SESSION_NAME}\")\nPARAM_AWS_CLI_ROLE_ARN=$(eval echo \"${PARAM_AWS_CLI_ROLE_ARN}\")\n\nif [ -z \"${PARAM_ROLE_SESSION_NAME}\" ]; then\n echo \"Role session name is required\"\n exit 1\nfi\n\nif [ -z \"${CIRCLE_OIDC_TOKEN}\" ]; then\n echo \"OIDC Token cannot be found. A CircleCI context must be specified.\"\n exit 1\nfi\n\nif [ ! \"$(command -v aws)\" ]; then\n echo \"AWS CLI is not installed. Please run the setup or install command first.\"\n exit 1\nfi\n\nread -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \\<<EOF\n$(aws sts assume-role-with-web-identity \\\n--role-arn \"${PARAM_AWS_CLI_ROLE_ARN}\" \\\n--role-session-name \"${PARAM_ROLE_SESSION_NAME}\" \\\n--web-identity-token \"${CIRCLE_OIDC_TOKEN}\" \\\n--duration-seconds \"${PARAM_SESSION_DURATION}\" \\\n--query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \\\n--output text)\nEOF\n\nif [ -z \"${AWS_ACCESS_KEY_ID}\" ] || [ -z \"${AWS_SECRET_ACCESS_KEY}\" ] || [ -z \"${AWS_SESSION_TOKEN}\" ]; then\n echo \"Failed to assume role\";\n exit 1\nelse \n {\n echo \"export AWS_ACCESS_KEY_ID=\\\"${AWS_ACCESS_KEY_ID}\\\"\"\n echo \"export AWS_SECRET_ACCESS_KEY=\\\"${AWS_SECRET_ACCESS_KEY}\\\"\"\n echo \"export AWS_SESSION_TOKEN=\\\"${AWS_SESSION_TOKEN}\\\"\"\n } >>\"$BASH_ENV\"\n echo \"Assume role with web identity succeeded\"\nfi\n"
            # eval echo \if [ "$CIRCLE_BRANCH" == "sre" ]; then
            # ${ENV}="$CIRCLE_BRANCH" \
            # ${ROLE-ARN}="arn:aws:iam::713463347743:role/sre-circleci-job" \
            # ${RESOURCE-CLASS}="veerum/terraform-sre-aws" \
            # "PARAM_ROLE_SESSION_NAME=$(eval echo \"${PARAM_ROLE_SESSION_NAME}\")\nPARAM_AWS_CLI_ROLE_ARN=$(eval echo \"${PARAM_AWS_CLI_ROLE_ARN}\")\n\nif [ -z \"${PARAM_ROLE_SESSION_NAME}\" ]; then\n echo \"Role session name is required\"\n exit 1\nfi\n\nif [ -z \"${CIRCLE_OIDC_TOKEN}\" ]; then\n echo \"OIDC Token cannot be found. A CircleCI context must be specified.\"\n exit 1\nfi\n\nif [ ! \"$(command -v aws)\" ]; then\n echo \"AWS CLI is not installed. Please run the setup or install command first.\"\n exit 1\nfi\n\nread -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \\<<EOF\n$(aws sts assume-role-with-web-identity \\\n--role-arn \"${PARAM_AWS_CLI_ROLE_ARN}\" \\\n--role-session-name \"${PARAM_ROLE_SESSION_NAME}\" \\\n--web-identity-token \"${CIRCLE_OIDC_TOKEN}\" \\\n--duration-seconds \"${PARAM_SESSION_DURATION}\" \\\n--query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \\\n--output text)\nEOF\n\nif [ -z \"${AWS_ACCESS_KEY_ID}\" ] || [ -z \"${AWS_SECRET_ACCESS_KEY}\" ] || [ -z \"${AWS_SESSION_TOKEN}\" ]; then\n echo \"Failed to assume role\";\n exit 1\nelse \n {\n echo \"export AWS_ACCESS_KEY_ID=\\\"${AWS_ACCESS_KEY_ID}\\\"\"\n echo \"export AWS_SECRET_ACCESS_KEY=\\\"${AWS_SECRET_ACCESS_KEY}\\\"\"\n echo \"export AWS_SESSION_TOKEN=\\\"${AWS_SESSION_TOKEN}\\\"\"\n } >>\"$BASH_ENV\"\n echo \"Assume role with web identity succeeded\"\n echo \"export TERRAFORM_ENVIRONMENT=terraform-dev-aws\">>\"$BASH_ENV\"\nfi\n"
            # fi\n
            # if [ "$CIRCLE_BRANCH" == "circleci_terraform" ]; then
            # "PARAM_ROLE_SESSION_NAME=$(eval echo \"${PARAM_ROLE_SESSION_NAME}\")\nPARAM_AWS_CLI_ROLE_ARN=$(eval echo \"${PARAM_AWS_CLI_ROLE_ARN}\")\n\nif [ -z \"${PARAM_ROLE_SESSION_NAME}\" ]; then\n echo \"Role session name is required\"\n exit 1\nfi\n\nif [ -z \"${CIRCLE_OIDC_TOKEN}\" ]; then\n echo \"OIDC Token cannot be found. A CircleCI context must be specified.\"\n exit 1\nfi\n\nif [ ! \"$(command -v aws)\" ]; then\n echo \"AWS CLI is not installed. Please run the setup or install command first.\"\n exit 1\nfi\n\nread -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \\<<EOF\n$(aws sts assume-role-with-web-identity \\\n--role-arn \"${PARAM_AWS_CLI_ROLE_ARN}\" \\\n--role-session-name \"${PARAM_ROLE_SESSION_NAME}\" \\\n--web-identity-token \"${CIRCLE_OIDC_TOKEN}\" \\\n--duration-seconds \"${PARAM_SESSION_DURATION}\" \\\n--query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \\\n--output text)\nEOF\n\nif [ -z \"${AWS_ACCESS_KEY_ID}\" ] || [ -z \"${AWS_SECRET_ACCESS_KEY}\" ] || [ -z \"${AWS_SESSION_TOKEN}\" ]; then\n echo \"Failed to assume role\";\n exit 1\nelse \n {\n echo \"export AWS_ACCESS_KEY_ID=\\\"${AWS_ACCESS_KEY_ID}\\\"\"\n echo \"export AWS_SECRET_ACCESS_KEY=\\\"${AWS_SECRET_ACCESS_KEY}\\\"\"\n echo \"export AWS_SESSION_TOKEN=\\\"${AWS_SESSION_TOKEN}\\\"\"\n } >>\"$BASH_ENV\"\n echo \"Assume role with web identity succeeded\"\n echo \"export TERRAFORM_ENVIRONMENT=terraform-dev-aws\">>\"$BASH_ENV\"\nfi\n"
            # fi
          command: |
           
              case "$CIRCLE_BRANCH" in
                  "circleci_terraform")
                      PARAM_ROLE_SESSION_NAME=$(eval echo "${PARAM_ROLE_SESSION_NAME}")
                      PARAM_AWS_CLI_ROLE_ARN=$(eval echo "${PARAM_AWS_CLI_ROLE_ARN_DEV}")
                      if [ -z "${PARAM_ROLE_SESSION_NAME}" ]; then
                        echo "Role session name is required"
                        exit 1
                      fi
                      if [ -z "${CIRCLE_OIDC_TOKEN}" ]; then
                        echo "OIDC Token cannot be found. A CircleCI context must be specified."
                        exit 1
                      fi
                      if [ ! "$(command -v aws)" ]; then
                        echo "AWS CLI is not installed. Please run the setup or install command first."
                        exit 1
                      fi
                      read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
                      $(aws sts assume-role-with-web-identity --role-arn "${PARAM_AWS_CLI_ROLE_ARN_DEV}" --role-session-name "${PARAM_ROLE_SESSION_NAME}" --web-identity-token "${CIRCLE_OIDC_TOKEN}" --duration-seconds "${PARAM_SESSION_DURATION}" --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
                      
                      if [ -z "${AWS_ACCESS_KEY_ID}" ] || [ -z "${AWS_SECRET_ACCESS_KEY}" ] || [ -z "${AWS_SESSION_TOKEN}" ]; then
                        echo "Failed to assume role"
                        exit 1
                      else 
                        echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"  >> $BASH_ENV
                        echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"  >> $BASH_ENV
                        echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"  >> $BASH_ENV

                      echo "Assume role with web identity succeeded"
                      echo "export TERRAFORM_ENVIRONMENT=terraform-dev-aws" >> $BASH_ENV
                      fi
                  ;;

              esac

          environment:
              PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
              PARAM_AWS_CLI_ROLE_ARN: <<parameters.role-arn>>
              PARAM_ROLE_SESSION_NAME: <<parameters.role-session-name>>
              PARAM_SESSION_DURATION: <<parameters.session-duration>>

terraform_init: &terraform_init
      run:
        name: terraform init
        command: |
          sudo wget --quiet https://releases.hashicorp.com/terraform/0.12.31/terraform_0.12.31_linux_amd64.zip
          sudo unzip terraform_0.12.31_linux_amd64.zip
          sudo mv -f terraform /usr/bin
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get -y install git
          source $BASH_ENV
          cd terraform-root-aws/$TERRAFORM_ENVIRONMENT
          terraform init

apply_job: &apply_job
  executor: dev_config
  steps:
    - *restore_repo
    - aws-oidc-setup
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd terraform-root-aws/$TERRAFORM_ENVIRONMENT
          terraform apply --auto-approve ../../terraform.plan

jobs:

  build:
    executor: dev_config
    steps:
      - checkout
      - aws-oidc-setup
      - run:
          name: terraform fmt
          command: |
            source $BASH_ENV
            cd terraform-root-aws/$TERRAFORM_ENVIRONMENT

            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo

              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .

              echo
              echo "Please run terraform fmt"

              exit 1
            fi
      - *save_repo

  plan:
    executor: dev_config
    steps:
      - *restore_repo
      - aws-oidc-setup
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd terraform-root-aws/$TERRAFORM_ENVIRONMENT
            terraform plan -out=../../terraform.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform.plan

  apply:
    <<: *apply_job
  apply-with-approval:
    <<: *apply_job

workflows:
  build_plan_approve_apply:
    jobs:
      - build:
          context: 
            - aws     
      - plan:
          requires:
            - build
          context: 
            - aws  
          filters:
            branches:
              only:
              - prod
              - staging
              - dev
              - circleci_terraform
      - approve:
          type: approval
          requires:
            - plan
          context: 
            - aws  
          filters:
            branches:
              only: 
              - prod
              - staging
              - dev
      - apply-with-approval:
          requires:
            - approve
          context: 
            - aws  
          filters:
            branches:
              only: 
              - prod
              - staging
              - dev
      - apply:
          requires:
            - plan
          context: 
            - aws
          filters:
            branches:
              only: 
              - sre
